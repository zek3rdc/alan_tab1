# SIGME2 - Sistema de Gesti√≥n de Secciones y Aulas

## üìã Descripci√≥n

SIGME2 es una aplicaci√≥n de escritorio desarrollada en Python con PyQt6 para la gesti√≥n integral de secciones escolares y asignaci√≥n de aulas. El sistema permite administrar de manera eficiente la creaci√≥n, edici√≥n y eliminaci√≥n de secciones, as√≠ como la asignaci√≥n autom√°tica o manual de aulas y docentes gu√≠a.

## ‚ú® Caracter√≠sticas Principales

### üè´ Gesti√≥n de Secciones
- **Creaci√≥n de Secciones**: Asignaci√≥n autom√°tica de c√≥digos de secci√≥n basados en grado, letra y turno
- **Asignaci√≥n de Docentes**: Selecci√≥n de docentes gu√≠a desde una lista actualizada del personal
- **Gesti√≥n de Aulas**: Asignaci√≥n autom√°tica o manual de aulas por grado
- **Capacidad M√°xima**: Configuraci√≥n de l√≠mites de estudiantes por secci√≥n

### üîç Funcionalidades Avanzadas
- **B√∫squeda en Tiempo Real**: Filtrado instant√°neo por c√≥digo, grado, letra, docente o aula
- **Paginaci√≥n**: Visualizaci√≥n organizada de 10 registros por p√°gina
- **Edici√≥n en L√≠nea**: Modificaci√≥n de secciones existentes con validaciones
- **Eliminaci√≥n M√∫ltiple**: Selecci√≥n y eliminaci√≥n de m√∫ltiples secciones simult√°neamente

### üõ°Ô∏è Seguridad y Robustez
- **Validaciones Integrales**: Verificaci√≥n de datos antes de operaciones de base de datos
- **Manejo de Errores**: Sistema de logging autom√°tico para errores t√©cnicos
- **Transacciones Seguras**: Rollback autom√°tico en caso de errores
- **Interfaz Responsiva**: Feedback visual durante operaciones de base de datos

## üöÄ Instalaci√≥n

### Prerrequisitos
- Python 3.8 o superior
- PostgreSQL 12 o superior
- pip (gestor de paquetes de Python)

### Dependencias
```bash
pip install PyQt6 psycopg2-binary
```

### Configuraci√≥n de Base de Datos
1. Crear una base de datos PostgreSQL llamada `Sigme2`
2. Configurar las credenciales en el archivo principal:
```python
DB_PARAMS = {
    'dbname': 'Sigme2',
    'user': 'tu_usuario',
    'password': 'tu_contrase√±a',
    'host': 'localhost',
    'port': '5432'
}
```

### Estructura de Tablas Requeridas
```sql
-- Tabla de a√±os escolares
CREATE TABLE ANO_ESCOLAR (
    codigo VARCHAR(10) PRIMARY KEY,
    activo BOOLEAN DEFAULT FALSE
);

-- Tabla de personal
CREATE TABLE PERSONAL (
    cedula VARCHAR(20) PRIMARY KEY,
    nombres VARCHAR(100) NOT NULL,
    apellidos VARCHAR(100) NOT NULL
);

-- Tabla de secciones
CREATE TABLE SECCION (
    codigo VARCHAR(10) PRIMARY KEY,
    letra CHAR(1) NOT NULL,
    codigo_grado INTEGER NOT NULL,
    turno CHAR(1) NOT NULL,
    cedula_docente_guia VARCHAR(20) REFERENCES PERSONAL(cedula),
    aula_asignada VARCHAR(10),
    capacidad_maxima INTEGER NOT NULL,
    total_estudiantes INTEGER DEFAULT 0,
    estudiantes_varones INTEGER DEFAULT 0,
    estudiantes_hembras INTEGER DEFAULT 0,
    codigo_ano_escolar VARCHAR(10) REFERENCES ANO_ESCOLAR(codigo)
);
```

## üéØ Uso de la Aplicaci√≥n

### Inicio R√°pido
1. Ejecutar la aplicaci√≥n:
```bash
python Secciones_Alan.py
```

2. La interfaz se cargar√° autom√°ticamente con:
   - Lista de secciones existentes
   - Formulario para nueva secci√≥n
   - Controles de b√∫squeda y paginaci√≥n

### Crear una Nueva Secci√≥n
1. **Completar el formulario**:
   - Grado (1-6)
   - Letra (A-E)
   - Turno (Ma√±ana/Tarde)
   - Docente Gu√≠a (seleccionar de la lista)
   - Capacidad M√°xima (n√∫mero entero positivo)
   - Aula (opcional - se asigna autom√°ticamente si se deja vac√≠o)

2. **Hacer clic en "Asignar Secci√≥n"**

3. **Verificar la confirmaci√≥n** y la nueva secci√≥n aparecer√° en la tabla

### Editar una Secci√≥n Existente
1. **Seleccionar una fila** en la tabla de secciones
2. **Hacer clic en "Editar Secci√≥n"**
3. **Modificar los campos** necesarios (grado, letra y turno no son editables)
4. **Hacer clic en "Actualizar Secci√≥n"**

### Eliminar Secciones
1. **Seleccionar una o m√°s filas** en la tabla
2. **Hacer clic en "Eliminar Secci√≥n"**
3. **Confirmar la eliminaci√≥n** en el di√°logo

### B√∫squeda y Navegaci√≥n
- **B√∫squeda**: Escribir en el campo de b√∫squeda para filtrar resultados
- **Paginaci√≥n**: Usar los botones `<<`, `<`, `>`, `>>` para navegar entre p√°ginas
- **Informaci√≥n de p√°gina**: Se muestra "P√°gina X de Y" en la parte inferior

## üèóÔ∏è Arquitectura del Sistema

### Componentes Principales
- **ModuloInstitucion**: Clase principal de la interfaz de usuario
- **DBWorker**: Manejo de operaciones de base de datos en hilos separados
- **WorkerSignals**: Sistema de se√±ales para comunicaci√≥n entre hilos

### Patrones de Dise√±o
- **MVC (Modelo-Vista-Controlador)**: Separaci√≥n clara entre l√≥gica de negocio y presentaci√≥n
- **Observer**: Sistema de se√±ales para actualizaciones de UI
- **Worker Thread**: Operaciones de base de datos no bloqueantes

### Manejo de Estados
- **Modo Asignaci√≥n**: Estado por defecto para crear nuevas secciones
- **Modo Edici√≥n**: Estado especial para modificar secciones existentes
- **Validaci√≥n Visual**: Retroalimentaci√≥n inmediata con bordes rojos para errores

## üìÅ Estructura del Proyecto

```
SIGME2/
‚îú‚îÄ‚îÄ main.py                 # Archivo principal de la aplicaci√≥n
‚îú‚îÄ‚îÄ logs/                   # Directorio de archivos de log (se crea autom√°ticamente)
‚îÇ   ‚îî‚îÄ‚îÄ app_YYYYMMDD_HHMMSS.log
‚îú‚îÄ‚îÄ README.md              # Este archivo
‚îî‚îÄ‚îÄ requirements.txt       # Dependencias del proyecto
```

## üîß Configuraci√≥n Avanzada

### Personalizaci√≥n de Par√°metros
```python
# Cambiar el tama√±o de p√°gina para paginaci√≥n
self.page_size = 20  # Por defecto: 10

# Modificar el retraso de b√∫squeda
self.search_timer.start(300)  # Por defecto: 500ms

# Ajustar rango de grados
if grado_int < 1 or grado_int > 12:  # Por defecto: 1-6
```

### Estilos CSS Personalizables
La aplicaci√≥n utiliza estilos CSS embebidos que pueden modificarse en el m√©todo `__init__` de la clase `ModuloInstitucion`.

## üìä Logging y Monitoreo

### Sistema de Logs
- **Ubicaci√≥n**: Carpeta `logs/` en el directorio de la aplicaci√≥n
- **Formato**: `app_YYYYMMDD_HHMMSS.log`
- **Contenido**: Errores de base de datos, excepciones y operaciones cr√≠ticas

### Niveles de Log
- **ERROR**: Errores de base de datos y excepciones
- **CRITICAL**: Errores de conexi√≥n a la base de datos

## üö® Soluci√≥n de Problemas

### Problemas Comunes

#### Error de Conexi√≥n a Base de Datos
```
Error: No se pudo conectar a la base de datos
```
**Soluci√≥n**: Verificar que PostgreSQL est√© ejecut√°ndose y las credenciales sean correctas.

#### Tabla No Seleccionable
```
Los botones de editar/eliminar no se habilitan
```
**Soluci√≥n**: Hacer clic directamente en las filas de la tabla, no en el espacio vac√≠o.

#### Error de A√±o Escolar
```
Error: No hay un a√±o escolar activo registrado
```
**Soluci√≥n**: Insertar un registro en la tabla `ANO_ESCOLAR` con `activo = TRUE`.

### Logs de Depuraci√≥n
Revisar los archivos de log en la carpeta `logs/` para obtener informaci√≥n detallada sobre errores.

## ü§ù Contribuci√≥n

### Reportar Problemas
1. Revisar los logs de error
2. Incluir pasos para reproducir el problema
3. Especificar versi√≥n de Python y PostgreSQL

### Desarrollo
1. Fork del repositorio
2. Crear rama para nueva funcionalidad
3. Implementar cambios con pruebas
4. Enviar pull request

## üìÑ Licencia

Este proyecto est√° bajo la Licencia MIT. Ver el archivo `LICENSE` para m√°s detalles.

## üë• Cr√©ditos

Desarrollado para el sistema educativo con enfoque en la gesti√≥n eficiente de recursos acad√©micos.

---

**Versi√≥n**: 1.0.0  
**√öltima Actualizaci√≥n**: Diciembre 2024  
**Compatibilidad**: Python 3.8+, PostgreSQL 12+, PyQt6